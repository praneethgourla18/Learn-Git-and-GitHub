cd

ls , ls -a

mkdir

git init

touch names.txt

git status

git add names.txt (To add specific files) 

git add . (to add all files)

git commit -m "Addeded names.txt"

 git restore --staged names.txt (if you dont want to commit it after staging it) but the file once commited cannot be uncommited

git log (Togit  view the history of commits)

git reset commit_Id  (to go back to that commit means delete the commits until this one)


git stash (to store them some where else backstage) 

git remote add origin "your github repo link"  (We will use this to link our local project and the github repo --//if you havent created a github repo just go to github and create a repo and copy there )

//Now the local project and repo is connected but it will not show the commits to see our commits in repo we need to push the changes to it

git push origin master (to push the changes)

*** Branches ***  (you should always have multiple branches for multiple commits because if you have only one branch then only 1 pull request will be created for multiple commits)
git branch praneeth -->(to create a new branch praneeth)

git checkout praneeth --> (to switch to the 'Praneeth' branch

//if you want to contribute to a repository

1) fork the repository
2) Clone the forked repository
3) Create a branch
4) make changes and push to your branch

***Push***

git push origin praneeth 

*** pull ***

This is used to track the new commits of the upstream repository

1) add upstream repository (the original url of the repo you forked and cloned)
 

git remote add upstream "url"

2) git pull upstream main

so with this your forked update will be synced .


**** Pull request ****

1) After you push the changes to the forked repo now its time to open a pull request.

2) You can see an option in your forked repo to open a pull request if the author of the repo accepts or merges the pull request your changes will be visible on main repo..
Thats it!git 